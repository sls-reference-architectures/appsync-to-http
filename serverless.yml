service: appsync-to-http

configValidationMode: error

provider:
  name: aws
  logRetentionInDays: 7
  region: us-east-1
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: com.reference-architecture.deploys
    maxPreviousDeploymentArtifacts: 5
    serverSideEncryption: AES256
  environment:
    TABLE_NAME: ${self:custom.tableName}
  tags:
    lumigo:auto-trace: 'true'

custom:
  esbuild:
    minify: true
  eventBusARN: arn:aws:events:${self:provider.region}:${AWS::AccountId}:event-bus/${self:custom.eventBusName}
  eventBusName: ${self:service}-products
  prune:
    automatic: true
    number: 1
  tableName: ${self:service}-products

appSync: ${file(appSync/serverless.appsync.yml)}

plugins:
- serverless-appsync-plugin
- serverless-esbuild
- serverless-iam-roles-per-function
- serverless-deployment-bucket
- serverless-prune-plugin

functions:
## HTTP
  getProduct:
    handler: http/src/handlers.getProductHandler
    events:
    - httpApi:
        method: GET
        path: /products/{productId}
        authorizer:
          type: aws_iam
    iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:GetItem
      Resource: !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.tableName}
  
  getProducts:
    handler: http/src/handlers.getProductsHandler
    events:
    - httpApi:
        method: GET
        path: /products
        authorizer:
          type: aws_iam
    iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:Query
      Resource: !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.tableName}
  
  createProduct:
    handler: http/src/handlers.createProductHandler
    events:
    - httpApi:
        method: POST
        path: /products
        authorizer:
          type: aws_iam
    iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:PutItem
      Resource: !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.tableName}

## AppSync
  echo:
    handler: appSync/src/handlers.echo

## Events
  publishProductEvents:
    handler: http/src/handlers.publishProductEventsHandler
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt ProductTable.StreamArn
          batchSize: 1
          startingPosition: LATEST
    iamRoleStatements:
      - Effect: Allow
        Action: events:PutEvents
        Resource: !Sub ${self:custom.eventBusARN}

resources:
  Resources:
    ProductTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}
        KeySchema:
        - AttributeName: storeId
          KeyType: HASH
        - AttributeName: productId
          KeyType: RANGE
        AttributeDefinitions:
        - AttributeName: storeId
          AttributeType: S
        - AttributeName: productId
          AttributeType: S
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    
    ProductEventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: ${self:custom.eventBusName}

  Outputs:
    GraphQLApiUrl:
      Value: ${appsync:url}
    GraphQLApiKey:
      Value: ${appsync:apiKey.test}